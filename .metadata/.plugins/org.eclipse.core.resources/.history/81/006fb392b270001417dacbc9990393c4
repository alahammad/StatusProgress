package net.ahammad.statusprogressbar;

import android.app.Activity;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.os.Handler;
import android.view.Menu;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.ProgressBar;

public class MainActivity extends Activity implements OnClickListener{

	private int progressBarStatus;
	private Handler progressBarHandler = new Handler();
	private ProgressBar mProgressBar;

	private Button mButton;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		mProgressBar = (ProgressBar) findViewById(R.id.progressBar1);
		// you can customise your progress bar
		
		mButton = (Button) findViewById(R.id.button1);
		mButton.setOnClickListener(this);
		
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

	private void runProgreesBar() {
		mProgressBar.setVisibility(View.VISIBLE);
		progress();
		WindowManager.LayoutParams attrs = getWindow().getAttributes();
		attrs.flags |= WindowManager.LayoutParams.FLAG_FULLSCREEN;
		getWindow().setAttributes(attrs);
	}

	private void stopProgreesBar() {
		mProgressBar.setVisibility(View.GONE);
		WindowManager.LayoutParams attrs = getWindow().getAttributes();
		attrs.flags &= ~WindowManager.LayoutParams.FLAG_FULLSCREEN;
		getWindow().setAttributes(attrs);
	}

	private void progress() {
		new Thread(new Runnable() {
			public void run() {
				while (progressBarStatus < 100) {
					progressBarStatus = progressBarStatus + 3;
					// Update the progress bar and display the
					// current value in the text view
					progressBarHandler.post(new Runnable() {
						public void run() {
							mProgressBar.setProgress(progressBarStatus);
						}
					});
					try {
						// Sleep for 200 milliseconds.
						// Just to display the progress slowly
						Thread.sleep(200);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				runOnUiThread(new Runnable() {

					@Override
					public void run() {
						stopProgreesBar();
					}
				});
			}
		}).start();
	}

	@Override
	public void onClick(View v) {
		runProgreesBar();
	}

}
